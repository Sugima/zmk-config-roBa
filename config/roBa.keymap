#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 新しいスクロール動作の追加

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W      &kp E  &kp R         &kp T                                                                 &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S      &kp D  &kp F         &kp G        &none                         &kp LG(W)                  &kp H        &kp J  &kp K      &kp L    &lt 0 MINUS
&mt LEFT_SHIFT Z    &kp X      &kp C  &kp V         &kp B        &kp LS(LG(LEFT_BRACKET))      &kp LG(LS(RIGHT_BRACKET))  &kp N        &kp M  &kp COMMA  &kp DOT  &lt 3 SLASH
&kp LEFT_ALT        &kp LC(Z)  &mo 3  &kp LEFT_GUI  &lt 1 LANG2  &mt LEFT_SHIFT SPACE          &kp ENTER                  &lt 2 LANG1                             &lt 0 ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM {
            bindings = <
&kp TAB  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                      &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp PLUS
&trans   &kp DOLLAR       &kp PERCENT   &kp CARET             &none                  &trans      &trans  &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&trans   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &none                  &trans      &trans  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans   &trans           &trans        &trans                &trans                 &trans      &trans  &trans                                                  &trans
            >;
        };

        NAVI {
            bindings = <
&kp TAB  &kp TILDE       &kp GRAVE        &kp DOUBLE_QUOTES  &kp SQT                                &kp LC(LS(TAB))  &kp HOME          &kp UP_ARROW  &kp END            &kp LC(TAB)
&trans   &kp PIPE        &kp BACKSLASH    &kp COLON          &kp SEMI           &trans      &trans  &kp BACKSPACE    &kp LEFT          &kp DOWN      &kp RIGHT          &kp DELETE
&trans   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &trans      &trans  &none            &kp LG(LS(LEFT))  &none         &kp LS(LC(RIGHT))  &trans
&trans   &trans          &trans           &trans             &trans             &trans      &trans  &trans                                                              &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &none   &none   &none   &none                       &kp F12  &kp F7  &kp F8  &kp F9  &trans
&trans  &none   &none   &none   &none   &trans      &trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans
&trans  &none   &none   &none   &none   &trans      &trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                           &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &mkp MB3  &mkp MB2      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &mkp MB1  &trans        &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &kp LS(LC(L))     &kp LC(LS(UP_ARROW))            &kp LS(LC(LA(RIGHT)))  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(LC(LEFT))  &kp LS(LA(LC(LG(DOWN_ARROW))))  &kp LS(LC(RIGHT))      &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans                          &trans                 &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans                          &trans                 &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MISC {
            bindings = <
&trans  &none   &none         &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))                            &none   &none         &none         &none         &trans
&trans  &none   &kp C_REWIND  &kp C_FAST_FORWARD    &kp C_PLAY_PAUSE  &trans          &trans  &none   &bt BT_SEL 3  &bt BT_SEL 4  &none         &trans
&trans  &none   &none         &none                 &none             &kp K_MUTE      &trans  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LS(LA(LC(BACKSLASH)))
&trans  &trans  &trans        &trans                &trans            &trans          &trans  &trans                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };
    };
};
