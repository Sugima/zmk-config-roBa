#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 新しいスクロール動作の追加

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R         &kp T                                                            &kp Y                   &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F         &kp G                   &kp LS(LG(S))         &kp SQT            &kp H                   &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V         &kp B                   &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp N                   &kp M  &kp COMMA  &kp DOT  &lt 6 SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_GUI  &lt_to_layer_0 2 LANG2  &kp SPACE             &kp ENTER          &lt_to_layer_0 3 LANG1                             &lt 1 ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &kp LS(LG(NUMBER_4))  &kp K_PLAY_PAUSE                       &kp F12  &kp F7  &kp F8  &kp F9  &trans
&trans  &trans  &trans  &trans                &kp K_MUTE        &trans      &kp F13  &kp F11  &kp F4  &kp F5  &kp F6  &trans
&trans  &trans  &trans  &trans                &trans            &trans      &trans   &kp F10  &kp F1  &kp F2  &kp F3  &trans
&trans  &trans  &trans  &trans                &trans            &trans      &trans   &trans                           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp PLUS
&trans  &trans  &trans  &trans  &trans  &trans      &kp COMMA   &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans      &kp PERIOD  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans                                                  &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp LC(LS(TAB))  &kp HOME          &kp UP_ARROW  &kp END            &kp LC(TAB)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp BACKSPACE    &kp LEFT          &kp DOWN      &kp RIGHT          &kp DELETE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans           &kp LG(LS(LEFT))  &trans        &kp LS(LC(RIGHT))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                              &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans    &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &mkp MB1  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&kp ESC  &kp LS(LC(L))     &kp LC(LS(UP_ARROW))            &kp LS(LC(LA(RIGHT)))  &trans                              &trans  &trans  &trans    &trans        &trans
&kp TAB  &kp LS(LC(LEFT))  &kp LS(LA(LC(LG(DOWN_ARROW))))  &kp LS(LC(RIGHT))      &trans  &trans          &kp GRAVE   &trans  &trans  &trans    &trans        &trans
&trans   &trans            &trans                          &trans                 &trans  &kp LS(N9)      &kp LS(N0)  &trans  &trans  &kp SEMI  &kp LS(SEMI)  &kp BACKSLASH
&trans   &trans            &trans                          &trans                 &trans  &trans          &trans      &trans                                  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR
            >;
        };
    };
};
